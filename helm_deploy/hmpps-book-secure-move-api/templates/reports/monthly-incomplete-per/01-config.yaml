{{- $fullName := printf "%s-%s" (include "generic-service.fullname" $) "incomplete-per-config" | trunc 52 }}
{{- if .Values.scripts.reports.monthlyIncomPer.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullName }}
data:
  from-date: "1 month ago"
  to-date: "1 day ago"
  subject: "BaSM Incomplete PER Report [LAST_MONTH]"
  body: "BaSM Incomplete PER report for [LAST_MONTH] is available at the link below."
  filename: "basm-incomplete-per-report-[LAST_MONTH]"
  retention: "24 weeks"
  confirm_email: "true"
  recipients: {{ .Values.scripts.reports.monthlyIncomPer.recipients }}
  combine_reports.sh: |-
    FROM_DATE=$(date --date="$REPORT_START" '+%Y-%m-%d')
    FROM_DATE_FULL=$(date --date="$REPORT_START" '+%A, %e %B')
    TO_DATE=$(date --date="$REPORT_END" '+%Y-%m-%d')
    TO_DATE_FULL=$(date --date="$REPORT_END" '+%A, %e %B')
    TODAY_DATE=$(date '+%Y-%m-%d')
    TODAY_FULL=$(date '+%A, %e %B')
    LAST_MONTH=$(date --date="$(date +%Y-%m-15) -1 month" '+%B %Y')
    
    
    echo "Report start date: $FROM_DATE ($REPORT_START)"
    echo "Report end date: $TO_DATE ($REPORT_END)"
    cp /report/stats.sql /tmp/stats.sql
    cp /report/status.sql /tmp/status.sql
    cp /report/duplicates.sql /tmp/duplicates.sql
    echo "Replacing start and end date placeholders in template SQL"
    
    sed -i '/tmp/stats.sql' -e "s/\[FROM\]/${FROM_DATE}/g"
    sed -i '/tmp/stats.sql' -e "s/\[TO\]/${TO_DATE}/g" 
    
    sed -i '/tmp/status.sql' -e "s/\[FROM\]/${FROM_DATE}/g"
    sed -i '/tmp/status.sql' -e "s/\[TO\]/${TO_DATE}/g"     
    
    sed -i '/tmp/duplicates.sql' -e "s/\[FROM\]/${FROM_DATE}/g"
    sed -i '/tmp/duplicates.sql' -e "s/\[TO\]/${TO_DATE}/g" 
        
    echo -n  ' \COPY (' > /tmp/cmd.sql
    echo -n $(tr '\n' ' ' < /tmp/stats.sql) >> /tmp/cmd.sql
    echo -n ") TO '/tmp/stats.csv' csv;" >> /tmp/cmd.sql
    
    echo -n  ' \COPY (' > /tmp/cmd2.sql
    echo -n $(tr '\n' ' ' < /tmp/status.sql) >> /tmp/cmd2.sql
    echo -n ") TO '/tmp/status.csv' csv;" >> /tmp/cmd2.sql 
    
    echo -n  ' \COPY (' > /tmp/cmd3.sql
    echo -n $(tr '\n' ' ' < /tmp/duplicates.sql) >> /tmp/cmd3.sql
    echo -n ") TO '/tmp/duplicates.csv' csv;" >> /tmp/cmd3.sql
        
    echo -n $(tr '\n' ' ' < /report/function.sql) > /tmp/func.sql
    

    #echo "Ensuring the section status function is created" #This only works on main instance, not replica
    #psql $DB_INSTANCE -f /tmp/func.sql    
    echo "Querying the database for PER stats"
    psql $DB_INSTANCE -f /tmp/cmd.sql
    
    echo "Querying the database for Section Status"
    psql $DB_INSTANCE -f /tmp/cmd2.sql

    echo "Querying the database for Duplicates"
    psql $DB_INSTANCE -f /tmp/cmd3.sql
        
    https -d --ignore-stdin  https://github.com/mentax/csv2xlsx/releases/download/v0.5.1/csv2xlsx_Linux_x86_64.tar.gz -o /tmp/csv2xlsx.tar.gz
  
    mkdir /tmp/csv2xlsx 
    tar -xzf /tmp/csv2xlsx.tar.gz -C /tmp/csv2xlsx 
    
    echo "Decoding template"
    base64 -d /report/template.b64 > /tmp/template.xltm
    
    /tmp/csv2xlsx/csv2xlsx -t /tmp/template.xltm -s 'PER Stats' -s 'Section Status' -s 'Duplicates' --output /tmp/report.xlsx /tmp/stats.csv /tmp/status.csv /tmp/duplicates.csv
    
    ls -lh /tmp/report.xlsx 
    base64 -i /tmp/report.xlsx > /tmp/report.b64
    

    notify='api.notifications.service.gov.uk/v2/notifications/email'
    
    echo ${EMAIL_BODY} > /tmp/body.txt
    echo ${EMAIL_SUBJECT} > /tmp/subject.txt
    echo ${FILENAME} > /tmp/filename.txt
    INPUT='/tmp/body.txt' REPORT_START="${REPORT_START}" REPORT_END="${REPORT_END}" /scripts/placeholders.sh
    INPUT='/tmp/subject.txt' REPORT_START="${REPORT_START}" REPORT_END="${REPORT_END}" /scripts/placeholders.sh
    INPUT='/tmp/filename.txt' REPORT_START="${REPORT_START}" REPORT_END="${REPORT_END}" /scripts/placeholders.sh
    
    for i in ${EMAIL_ADDRESSEES//,/ }
    do
    
    https --timeout 30 --ignore-stdin  -A bearer -a $(bash /scripts/notify-token.sh) $notify \
    email_address="$i" \
    template_id='e8b1811b-e02f-4fe3-bddc-5f240965c789' \
    personalisation[main-text]="$(cat /tmp/body.txt)" \
    personalisation[email-subject]="$(cat /tmp/subject.txt).xlsx" \
    personalisation[link_to_file][file]="@/tmp/report.b64" \
    personalisation[link_to_file][filename]="$(cat /tmp/filename.txt).xlsx" \
    personalisation[link_to_file][confirm_email_before_download]:=${CONFIRM_EMAIL} \
    personalisation[link_to_file][retention_period]="${RETENTION_PERIOD}"
    
    done
  section_status_func_sql: |-
    CREATE EXTENSION IF NOT EXISTS tablefunc;
        create or replace function getstatus(varchar) RETURNS varchar
        AS $$
        BEGIN

        if $1 = 'completed' then
        return 'Completed';
        elsif $1 = 'not_started' then
        return 'Not started';
        elsif $1 = 'in_progress' then
        return 'In progress';
        else
        return null;
        end if;
        END;
        $$ LANGUAGE plpgsql;
  per_stats_sql: |-
      SELECT 
      lf.title,
      count(L.flid) as completed_moves,
      NULLIF(count(L.flid) filter (where L.per_status in ('completed', 'confirmed')),0) as completed_per,
      NULLIF(count(L.flid) filter (where L.pro_requires_yra = 'true'),0) as needs_yra,
      NULLIF(count(L.flid) filter (where (L.pro_requires_yra = 'true') and (L.yra_id is null or L.yra_status not in ('completed', 'confirmed'))),0) as incomplete_yra,
      NULLIF(count(L.flid) filter (where L.per_id is null),0) as no_per,
      NULLIF(count(L.flid) filter (where L.per_status = 'unstarted'),0) as unstarted_per,
      NULLIF(count(L.flid) filter (where L.per_status = 'in_progress'),0) as in_progress_pers,
      NULLIF(round(((count(L.flid) filter (where (per_id is null or per_status not in ('completed', 'confirmed'))))::decimal / count(L.flid)::decimal), 3),0) as pc_incomplete
      FROM (
      select
      m.from_location_id as flid,
      per.status as per_status,
      per.id as per_id,
      pro.requires_youth_risk_assessment as pro_requires_yra,
      yra.id as yra_id,
      yra.status as yra_status
      from moves m
      left join profiles pro on m.profile_id = pro.id
      left join person_escort_records per on pro.id = per.profile_id
      left join youth_risk_assessments yra on pro.id = yra.profile_id
      left outer join versions v on v.item_id = m.id and v.item_type = 'Move' and v.event = 'create'
      where m.date between '[FROM]' and '[[TO]]'
      and m.status = 'completed') as L
      left join locations lf on L.flid = lf.id
      group by lf.title
      order by pc_incomplete desc NULLS LAST, (count(L.flid) filter (where (per_id is null or per_status not in ('completed', 'confirmed')))) desc NULLS LAST

  section_status_sql: |-    
    select l.title as from_loc,
    t.title as to_loc,
    COALESCE(s.name, 'BaSM Frontend') as created_by,
    m.status,
    m.date,
    m.reference,
    person.first_names,
    person.last_name,
    getstatus(info.risk) as risk,
    getstatus(info.offence) as offence,
    getstatus(info.health) as health,
    getstatus(info.property) as property,
    dupe.dupe as dupe,
    CASE
    WHEN l.location_type = 'court' then 'true'
    ELSE null
    END as from_location_court,
    CASE
    WHEN t.location_type = 'court' then 'true'
    ELSE null
    END as to_location_court,
    m.allocation_id as allocation,
    'https://bookasecuremove.service.justice.gov.uk/move/' || m.id as url
    from moves m
    left join profiles pro on m.profile_id = pro.id
    left join person_escort_records per on pro.id = per.profile_id
    left join people person on  pro.person_id = person.id
    left join locations l on  m.from_location_id = l.id
    left join locations t on  m.to_location_id = t.id
    left outer join versions v on v.item_id = m.id and v.item_type = 'Move' and v.event = 'create'
    left outer join suppliers s on v.supplier_id = s.id
    left join (
    select profile_id,
    jsonb_path_query(section_progress, '$[*] ? (@.key == "risk-information")') ->> 'status' as risk,
    jsonb_path_query(section_progress, '$[*] ? (@.key == "offence-information")')->> 'status'  as offence,
    jsonb_path_query(section_progress, '$[*] ? (@.key == "health-information")')->> 'status'  as health,
    jsonb_path_query(section_progress, '$[*] ? (@.key == "property-information")') ->> 'status' as property
    from person_escort_records
    where profile_id in (
    select pro.id from moves m
    left join profiles pro on m.profile_id = pro.id
    left join person_escort_records per on pro.id = per.profile_id
    left join people person on  pro.person_id = person.id
    where m.date between '[FROM]' and '[TO]'
    and m.status = 'completed'
    and (per.id is null or per.status not in ('completed', 'confirmed'))
    )
    ) as info
    on info.profile_id = pro.id
    
    left join (
    select m.id, m.from_location_id, 'true' as dupe
    from (
    select  i.date, i.first_names, i.last_name, i.from_location_id from (
    select count(*) as occ,
    m.date,
    upper(ps.last_name) as last_name,
    upper(ps.first_names) as first_names,
    m.from_location_id
    from moves m
    join profiles p on m.profile_id = p.id
    join people ps on p.person_id = ps.id
    and m.date between '[FROM]' and '[TO]'
    group by m.date,
    upper(ps.last_name),
    upper(ps.first_names),
    
    m.from_location_id
    ) as i
    
    where i.occ > 1
    
    ) as j
    
    join people ps on j.last_name = upper(ps.last_name) and j.first_names = upper(ps.first_names)
    join profiles p on p.person_id = ps.id
    join moves m on m.date = j.date and m.profile_id = p.id and m.from_location_id = j.from_location_id
    ) as dupe
    on dupe.id = m.id and dupe.from_location_id = m.from_location_id
    
    
    where m.date between '[FROM]' and '[TO]'
    and m.status = 'completed'
    and (per.id is null or per.status not in ('completed', 'confirmed'))
    order by from_loc, date 

  duplicates_sql: |-
      select l.title as from_loc,
      t.title as to_loc,
      m.date,
      m.reference,
      person.first_names,
      person.last_name,
      getstatus(risk.status) as risk,
      getstatus(offence.status) as offence,
      getstatus(health.status) as health,
      getstatus(property.status) as property,
      m.status as move_status,
      COALESCE(per.status, 'No PER') as per_status,
      m.allocation_id as allocation,
      COALESCE(s.name, 'BaSM Frontend') as created_by,
      'https://bookasecuremove.service.justice.gov.uk/move/' || m.id as url
      from moves m
      left join profiles pro on m.profile_id = pro.id
      left join person_escort_records per on pro.id = per.profile_id
      left join people person on  pro.person_id = person.id
      left join locations l on  m.from_location_id = l.id
      left join locations t on  m.to_location_id = t.id
      left outer join versions v on v.item_id = m.id and v.item_type = 'Move' and v.event = 'create'
      left outer join suppliers s on v.supplier_id = s.id
      left join (
      select profile_id, section.key, section.status from person_escort_records, jsonb_to_recordset(person_escort_records.section_progress) as section(key text, status text)
      where section.key = 'offence-information'
      and profile_id in (
      select pro.id from moves m
      left join profiles pro on m.profile_id = pro.id
      left join person_escort_records per on pro.id = per.profile_id
      left join people person on  pro.person_id = person.id
      where m.date between '[FROM]' and '[TO]'
      )
      ) as offence
      on offence.profile_id = pro.id
      
      left join (
      select profile_id, section.key, section.status from person_escort_records, jsonb_to_recordset(person_escort_records.section_progress) as section(key text, status text)
      where section.key = 'property-information'
      and profile_id in (
      select pro.id from moves m
      left join profiles pro on m.profile_id = pro.id
      left join person_escort_records per on pro.id = per.profile_id
      left join people person on  pro.person_id = person.id
      where m.date between '[FROM]' and '[TO]'
      )
      ) as property
      on property.profile_id = pro.id
      
      left join (
      select profile_id, section.key, section.status from person_escort_records, jsonb_to_recordset(person_escort_records.section_progress) as section(key text, status text)
      where section.key = 'risk-information'
      and profile_id in (
      select pro.id from moves m
      left join profiles pro on m.profile_id = pro.id
      left join person_escort_records per on pro.id = per.profile_id
      left join people person on  pro.person_id = person.id
      where m.date between '[FROM]' and '[TO]'
      )
      ) as risk
      on risk.profile_id = pro.id
      
      left join (
      select profile_id, section.key, section.status from person_escort_records, jsonb_to_recordset(person_escort_records.section_progress) as section(key text, status text)
      where section.key = 'health-information'
      and profile_id in (
      select pro.id from moves m
      left join profiles pro on m.profile_id = pro.id
      left join person_escort_records per on pro.id = per.profile_id
      left join people person on  pro.person_id = person.id
      where m.date between '[FROM]' and '[TO]'
      )
      ) as health
      on health.profile_id = pro.id
      
      join (
      select distinct(first_names, last_name, date), first_names, last_name, date from (
      select m.date,
      upper(person.first_names) as first_names,
      upper(person.last_name) as last_name
      from moves m
      left join profiles pro on m.profile_id = pro.id
      left join person_escort_records per on pro.id = per.profile_id
      left join people person on  pro.person_id = person.id
      left join (
      select m.id, 'true' as dupe
      from (
      select  i.date, i.first_names, i.last_name, i.from_location_id from (
      select count(*) as occ,
      m.date,
      upper(ps.last_name) as last_name,
      upper(ps.first_names) as first_names,
      m.from_location_id
      from moves m
      join profiles p on m.profile_id = p.id
      join people ps on p.person_id = ps.id
      and m.date between '[FROM]' and '[TO]'
      group by m.date,
      upper(ps.last_name),
      upper(ps.first_names),
      
      m.from_location_id
      ) as i
      
      where i.occ > 1
      
      ) as j
      
      join people ps on j.last_name = upper(ps.last_name) and j.first_names = upper(ps.first_names)
      join profiles p on p.person_id = ps.id
      join moves m on m.date = j.date and m.profile_id = p.id
      ) as dupe
      on dupe.id = m.id
      where m.date between '[FROM]' and '[TO]'
      and m.status = 'completed'
      and (per.id is null or per.status not in ('completed', 'confirmed'))
      and dupe.dupe = 'true'
      ) as dupe_people ) as dupes
      on dupes.last_name = upper(person.last_name) and dupes.first_names= upper(person.first_names) and m.date = dupes.date
      
      where m.date between '[FROM]' and '[TO]'
      
      order by date, last_name, first_names, move_status, per_status

  template: ""
  {{- end }}
