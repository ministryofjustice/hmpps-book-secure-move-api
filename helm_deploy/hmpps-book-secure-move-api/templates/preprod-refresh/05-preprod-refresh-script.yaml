{{- $fullName := printf "%s-%s" (include "generic-service.fullname" $) "preprod-refresh-script" | trunc 52 }}
{{- if .Values.scripts.preprodRefresh.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullName }}
data:
  entrypoint.sh: |-
    #!/bin/bash
    from=$(date --date="2 days ago" '+%Y-%m-%d')
    to=$(date '+%Y-%m-%d')
    echo "Refreshing data from ${from} to ${to}" 
        
    createTemp='/tmp/sql/createTables.sql'
    copyScript='/tmp/sql/copyFromTemp.sql'
    dropScript='/tmp/sql/dropTables.sql'
    
    execDest() {
      cmd=$1
      psql $DEST_DB_INSTANCE -c "${cmd}"
    }
  
    execSource() {
      cmd=$1
      psql $SOURCE_DB_INSTANCE -c "${cmd}"
    }
    
    execFileDest() {
      file=$1
      psql $DEST_DB_INSTANCE -f ${file}
    }
  
    execFileSource() {
      file=$1
      psql $SOURCE_DB_INSTANCE -f ${file}
    }
    
    temp () {
      table=$1
      echo "Copying ${table} to source temp table"
      cmd="INSERT INTO ${table}_temp SELECT * FROM ${table} where (created_at >= '${from}' and created_at < '${to}') OR (updated_at >= '${from}' and updated_at < '${to}');"
      execSource "${cmd}"
    }
    
    tempjoin () {
        table=$1
        join=$2
        echo "Copying ${table} to temporary table - using explicit select statement"
        cmd_two="INSERT INTO ${table}_temp ${join};"  
        execSource "${cmd_two}"
    }
    
    execFileSource ${dropScript}
    execFileDest ${dropScript}
    execFileDest ${createTemp}
    execFileSource ${createTemp}
    
    temp framework_flags                    
    temp framework_nomis_codes
    temp framework_nomis_mappings
    temp framework_questions
    temp framework_responses
    temp frameworks
    
    #JOIN TABLES
    tempjoin framework_flags_responses  "SELECT framework_response_id, framework_flag_id FROM public.framework_flags_responses JOIN framework_responses_temp ON framework_responses_temp.id = framework_flags_responses.framework_response_id"
    tempjoin framework_nomis_codes_questions  "SELECT framework_question_id, framework_nomis_code_id FROM framework_nomis_codes_questions JOIN framework_questions_temp ON framework_questions_temp.id = framework_nomis_codes_questions.framework_question_id"
    tempjoin framework_nomis_mappings_responses "SELECT framework_nomis_mappings_responses.id, framework_response_id, framework_nomis_mapping_id FROM framework_nomis_mappings_responses JOIN framework_responses_temp ON framework_responses_temp.id = framework_nomis_mappings_responses.framework_response_id"
    
    temp locations
    temp moves
    temp journeys
    temp people
    temp profiles
    temp person_escort_records
    temp court_hearings
    
    #tempall active_storage_attachments         #Purposefully omitted  
    #tempall active_storage_blobs               #Purposefully omitted  
    #tempall active_storage_variant_records     #Purposefully omitted  
    temp allocation_complex_cases
    temp allocations
    #temp ar_internal_metadata                  #Purposefully omitted          
    temp assessment_questions
    temp categories
    temp documents
    temp ethnicities
    temp flipper_features
    temp flipper_gates
    
    temp genders
    
    temp locations_regions
    temp nationalities
    temp nomis_alerts
    temp notifications
    #temp oauth_access_grants    #Purposefully omitted            
    #temp oauth_access_tokens    #Purposefully omitted              
    #temp oauth_applications     #Purposefully omitted              
    temp populations
    temp regions
    #temp schema_migrations      #Purposefully omitted          
    temp subscriptions
    temp supplier_locations
    temp suppliers
    temp youth_risk_assessments
    temp generic_events
    
    echo "Starting dump of data to preprod"
    pg_dump $SOURCE_DB_INSTANCE -t "*_temp" -O --section=data | psql $DEST_DB_INSTANCE 
    echo "Finished dumping data"

    echo "Copying data from destination temp tables to actual tables"    
    execFileDest ${copyScript}
    echo "Dropping temporary tables"
    execFileSource ${dropScript}
    execFileDest ${dropScript}
    echo "All done!"
{{- end }}
