version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@7.1.0
  slack: circleci/slack@4.12.1

aliases:
  - &notify_slack_on_failure
    slack/notify:
      event: fail
      branch_pattern: main
      channel: pecs-dev
      custom: |
        {
          "blocks": [
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": ":circleci-${CCI_STATUS}: CircleCI job *${CIRCLE_JOB}* ${CCI_STATUS}"
                }
              ]
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*${CIRCLE_PROJECT_REPONAME}* failed ${CIRCLE_JOB}"
              },
              "accessory": {
                "type": "button",
                "text": {
                  "type": "plain_text",
                  "text": "View job"
                },
                "url": "${CIRCLE_BUILD_URL}"
              }
            }
          ]
        }
  - &notify_slack_on_release_start
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      custom: '{
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*API is being prepared for release :building_construction:*"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "A new release was created by ${CIRCLE_USERNAME}"
                  },
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "@here"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Changelog"
                      },
                      "url": "https://github.com/ministryofjustice/hmpps-book-secure-move-api/blob/main/CHANGELOG.md"
                    }
                  ]
                }
              ]
            }'
  - &notify_slack_of_approval
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      custom: '{
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "API release *requires your approval* before it can be deployed :eyes:"
                  },
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "${BUILD_NOTIFICATIONS_MENTION_ID}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
                    }
                  ]
                }
              ]
            }'
  - &notify_slack_on_release_end
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      custom: '{
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*API has been deployed* :rocket:"
                  },
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "@here This release was successfully deployed to production"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Release"
                      },
                      "url": "https://github.com/ministryofjustice/hmpps-book-secure-move-api/releases"
                    }
                  ]
                }
              ]
            }'
  - &all_tags
    filters:
      tags:
        only: /.*/
  - &only_main
    filters:
      branches:
        only:
          - main
  - &only_for_deployment
    filters:
      tags:
        only: /^v.*/
      branches:
        only:
          - main
          - dev-auth-from-docs
          - /.*-deploydev/
  - &only_deploy_tags
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

# Not so keen on using references, but keeping them for now in case they have DRYness benefits.
# Likely to flatten then into the respective commands section.
references:
  _save-cache: &save-cache
    save_cache:
      key: v2-dependencies-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  _restore-cache: &restore-cache
    restore_cache:
      keys:
        - v2-dependencies-{{ checksum "Gemfile.lock" }}
        - v2-dependencies-
  _install-dependencies: &install-dependencies
    run:
      name: Install dependencies
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle config --local path vendor/bundle
        bundle check || bundle install --jobs=4 --retry=3
  _wait-for-db: &wait-for-db
    run:
      name: Wait for DB
      command: dockerize -wait tcp://localhost:5432 -timeout 1m
  _wait-for-wiremock: &wait-for-wiremock
    run:
      name: Wait for wiremock
      command: dockerize -wait tcp://localhost:8888 -timeout 1m
  _create-db: &create-db
    run:
      name: Database setup
      command: bundle exec rake db:create
  _api_docs: &api_docs
    run:
      name: Generate API Docs
      command: bundle exec rails rswag:specs:swaggerize
  _load_wiremock_mappings: &load_wiremock_mappings
    run:
      name: Load mappings into wiremock
      command: |
        echo "Loading wiremock mappings..."
        find spec/wiremock/prison-api/mappings/*.json -exec curl -vv  --request POST --url http://localhost:8888/__admin/mappings --header 'content-type: application/json' --data-binary "@{}" \;
        curl -vv http://localhost:8888/__admin/mappings 
        echo "Done"
  _notify_sentry_release: &notify_sentry_release
    run:
      name: Create release and notify Sentry of deploy
      command: |
        curl -sL https://sentry.io/get-cli/ | bash
        export SENTRY_RELEASE=$(sentry-cli releases propose-version)
        sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
        sentry-cli releases set-commits $SENTRY_RELEASE --auto
        sentry-cli releases finalize $SENTRY_RELEASE
        sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT
      environment:
        SENTRY_ENVIRONMENT: <<parameters.env>>
  _rspec: &rspec
    run:
      name: Run rspec tests
      command: |
        TESTS=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split )
        echo ${TESTS}
        bundle exec rspec ${TESTS}
        #COVERAGE=1 bundle exec rspec
  _rubocop: &rubocop
    run:
      name: Run rubocop
      command: bundle exec rubocop
  _attach-tmp-workspace: &attach-tmp-workspace
    attach_workspace:
      at: .

executors:
  basic-executor:
    docker:
      - image: cimg/base:2022.11

  cloud-platform-executor:
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move
          REPO_NAME: hmpps-book-secure-move-api

  test-executor:
    docker:
      # Check https://circleci.com/docs/2.0/language-ruby/ for more details
      - image: circleci/ruby:2.7.3
        environment:
          BUNDLER_VERSION: 2.1.4
          RAILS_ENV: test
          RACK_ENV: test
          DATABASE_URL: "postgres://postgres@localhost/hmpps-book-secure-move-api"
          EXTERNAL_URL: mocked_in_tests
          ENCRYPTOR_SALT: "2EREZ8Xub/vt0ya1ZM6YKUwIMN72MbmqeWMq7KS4BV8oSJJc27rDpZYmA6AQGYcS"
          EXTERNAL_WIREMOCK: "true"
      - image: cimg/postgres:12.11
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: hmpps-book-secure-move-api
          LANG: C.utf8
      - image: wiremock/wiremock:2.32.0-alpine
        command: --port 8888

commands:
  build-base:
    description: "Checkout app code and fetch dependencies for running tests"
    steps:
      - *restore-cache
      - *install-dependencies
      - *save-cache

  seed-database:
    description: "Create and seed the Database"
    steps:
      - *create-db

  build_docker_image:
    description: "Builds a Docker image"
    steps:
      - run:
          name: Build docker image
          command: |
            BUILD_DATE=$(date -Is)

            DOCKER_BUILDKIT=1 docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t ci .
      - run:
          name: Login to ECR
          command: |
            LOGIN_COMMAND="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${LOGIN_COMMAND}
      - run:
          name: Tag push with Git SHA
          command: |
            docker tag ci "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
      - run:
          name: check image
          command: docker images

  export_kube_vars:
    description: "Exports kube vars for the chosen environment and cluster."
    parameters:
      env:
        type: string
      cluster:
        type: string
        default: "live"
    steps:
      - run:
          name: Export kubernetes env vars
          command: |
            ENV_UPCASED=$(echo "<< parameters.env >>" | tr '[:lower:]' '[:upper:]')
            [[ "<< parameters.cluster >>" = "live" ]] && CLUSTER_SUFFIX="_LIVE"

            CLUSTER_VAR="KUBE_CLUSTER${CLUSTER_SUFFIX}"
            CACERT_VAR="KUBE_ENV_${ENV_UPCASED}_CACERT${CLUSTER_SUFFIX}"
            NAME_VAR="KUBE_ENV_${ENV_UPCASED}_NAME"
            NAMESPACE_VAR="KUBE_ENV_${ENV_UPCASED}_NAMESPACE"
            TOKEN_VAR="KUBE_ENV_${ENV_UPCASED}_TOKEN${CLUSTER_SUFFIX}"

            echo "export KUBE_CLUSTER=\"${!CLUSTER_VAR}\"" >> $BASH_ENV
            echo "export KUBE_CACERT=\"${!CACERT_VAR}\"" >> $BASH_ENV
            echo "export KUBE_NAME=\"${!NAME_VAR}\"" >> $BASH_ENV
            echo "export KUBE_NAMESPACE=\"${!NAMESPACE_VAR}\"" >> $BASH_ENV
            echo "export KUBE_TOKEN=\"${!TOKEN_VAR}\"" >> $BASH_ENV

  retag_docker_image:
    description: "Re-tag an image for deployment."
    parameters:
      env:
        type: string
    steps:
      - run:
          name: Login to ECR
          command: |
            LOGIN_COMMAND="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${LOGIN_COMMAND}
      - run:
          name: Retag image
          command: |
            MANIFEST=$(aws ecr batch-get-image --repository-name "${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}" \
            --image-ids imageTag=${CIRCLE_SHA1} --query 'images[].imageManifest' --output text)
            set +e
            PUT_RESULT=$(aws ecr put-image --repository-name "${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}" --image-tag << parameters.env >>.latest \
            --image-manifest "${MANIFEST}")
            set -e

            # ImageAlreadyExistsException can be thrown if we re-run a failed deployment, so ignore it
            if [[ $? != "0" && $PUT_RESULT != *"ImageAlreadyExistsException"* ]]; then
              exit 1
            fi

  deploy_to_k8s:
    description: "Deploys a previously built Docker image to dev/staging/preprod/production k8s environment"
    parameters:
      env:
        type: string
      cluster:
        type: string
        default: "live"
      notify_slack:
        type: string
        default: ""
      run_migrations:
        type: boolean
        default: true
    steps:
      - checkout
      - export_kube_vars:
          env: << parameters.env >>
          cluster: << parameters.cluster >>
      - run:
          name: Authenticate with cluster
          command: |
            echo -n $KUBE_CACERT | base64 -d > ./ca.crt
            kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
            kubectl config set-credentials circleci --token=${KUBE_TOKEN}
            kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=circleci --namespace=${KUBE_NAMESPACE}
            kubectl config use-context ${KUBE_CLUSTER}
      - when:
          condition: <<parameters.run_migrations>>
          steps:
            - run:
                name: run db migrations
                command: |
                  set -o errexit
                  sed 's/__ENV__/<< parameters.env >>/' k8s_migrate_job.yml | kubectl apply -f -
                  kubectl wait --for=condition=complete --timeout=300s job/hmpps-book-secure-move-api-migrate-db-<< parameters.env >>
                  exit_code=$?
                  kubectl logs job/hmpps-book-secure-move-api-migrate-db-<< parameters.env >>
                  kubectl delete job/hmpps-book-secure-move-api-migrate-db-<< parameters.env >>
                  exit ${exit_code}
      - deploy:
          name: rolling update image to << parameters.env >> on << parameters.cluster >>
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-deployment-<< parameters.env >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-deployment-<< parameters.env >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

            kubectl set image -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-<< parameters.env >>-sidekiq \
                    sidekiq="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-<< parameters.env >>-sidekiq \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"
      - *notify_sentry_release
      - when:
          condition: <<parameters.notify_slack>>
          steps:
            - *notify_slack_on_release_end

jobs:
  notify_of_approval:
    resource_class: small
    executor: basic-executor
    steps:
      - *notify_slack_of_approval

  notify_of_release:
    resource_class: small
    executor: basic-executor
    steps:
      - *notify_slack_on_release_start

  setup_test_environment:
    resource_class: small
    executor: test-executor
    steps:
      - checkout
      - setup_remote_docker
      - build-base
      - seed-database

  api_docs:
    resource_class: small
    executor: test-executor
    parallelism: 1
    steps:
      - checkout
      - *attach-tmp-workspace
      - build-base
      - *api_docs
      - persist_to_workspace:
          root: .
          paths:
            - swagger/v1/swagger.yaml
            - swagger/v2/swagger.yaml
      - *notify_slack_on_failure

  rspec_tests:
    executor: test-executor
    parallelism: 1
    steps:
      - checkout
      - build-base
      - *wait-for-db
      - *create-db
      - *attach-tmp-workspace
      - *wait-for-wiremock
      - *load_wiremock_mappings
      - *rspec

  linters:
    resource_class: small
    executor: test-executor
    steps:
      - checkout
      - build-base
      - *attach-tmp-workspace
      - *rubocop

  build_image:
    executor: cloud-platform-executor
    steps:
      - checkout
      - *attach-tmp-workspace
      - setup_remote_docker
      - build_docker_image

  deploy_dev:
    resource_class: small
    executor: cloud-platform-executor
    steps:
      - setup_remote_docker
      - retag_docker_image:
          env: "dev"
      - deploy_to_k8s:
          env: "dev"

  deploy_uat:
    resource_class: small
    executor: cloud-platform-executor
    steps:
      - setup_remote_docker
      - retag_docker_image:
          env: "uat"
      - deploy_to_k8s:
          env: "uat"

  deploy_staging:
    resource_class: small
    executor: cloud-platform-executor
    steps:
      - setup_remote_docker
      - retag_docker_image:
          env: "staging"
      - deploy_to_k8s:
          env: "staging"

  deploy_preprod:
    resource_class: small
    executor: cloud-platform-executor
    steps:
      - setup_remote_docker
      - retag_docker_image:
          env: "preprod"
      - deploy_to_k8s:
          env: "preprod"

  deploy_production:
    resource_class: small
    executor: cloud-platform-executor
    steps:
      - setup_remote_docker
      - retag_docker_image:
          env: "production"
      - deploy_to_k8s:
          env: "production"
          notify_slack: "true"

  ecr-cleanup:
    resource_class: small
    executor: cloud-platform-executor
    steps:
      - run:
          name: Check for too many images
          command: |
            COUNT=$(aws ecr list-images --repository-name 'book-a-secure-move/hmpps-book-secure-move-api' | jq '.imageIds | unique_by(.imageDigest) | length')
            if [ "$COUNT" -lt 200 ]; then circleci step halt; exit 0;  fi
            echo "More than 200 images found. Proceeding with cleanup"
      - run:
          name: Delete UNTAGGED images first
          command: |
            UNTAGGED_IMAGES=$( aws ecr list-images \
              --repository-name book-a-secure-move/hmpps-book-secure-move-api \
              --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
            aws ecr batch-delete-image --repository-name book-a-secure-move/hmpps-book-secure-move-api \
              --image-ids "$UNTAGGED_IMAGES" || true
      - run:
          name: Build manifest
          command: |
            TO_DELETE=$(aws ecr describe-images \
              --repository-name book-a-secure-move/hmpps-book-secure-move-api \
              --query 'imageDetails[]' --output json |\
              jq 'sort_by(.imagePushedAt)|map(select(any(.imageTags[]? ; contains("latest"))|not))|map({imageDigest})|.[:100]')
            echo "Tags to be deleted:"
            aws ecr describe-images  \
              --repository-name book-a-secure-move/hmpps-book-secure-move-api \
              --image-ids "${TO_DELETE}" --output json  | jq '.[][].imageTags[]'
            echo "Deleting:"
            aws ecr batch-delete-image \
            --repository-name book-a-secure-move/hmpps-book-secure-move-api \
            --image-ids "${TO_DELETE}"
      - run:
          name: Confirm live latest images
          command: |
            echo "Images tagged latest left behind"
            aws ecr describe-images \
            --repository-name  book-a-secure-move/hmpps-book-secure-move-api \
            --query 'imageDetails[]' --output json | \
            jq 'map(select(any(.imageTags[]? ; contains("latest"))))|map(.imageTags)'
workflows:
  version: 2

  test-build-deploy:
    jobs:
      - notify_of_release:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
      - setup_test_environment:
          <<: *all_tags
      - api_docs:
          context:
            - hmpps-common-vars
          <<: *all_tags
          requires:
            - setup_test_environment
      - rspec_tests:
          <<: *all_tags
          requires:
            - setup_test_environment
      - linters:
          <<: *all_tags
          requires:
            - setup_test_environment
      - build_image:
          <<: *only_for_deployment
          requires:
            - api_docs
            - rspec_tests
            - linters
      - hmpps/build_docker:
          <<: *only_for_deployment
          requires:
            - api_docs
            - rspec_tests
            - linters
          name: build_quay
          image_name: "quay.io/hmpps/hmpps-book-secure-move-api"
          additional_docker_build_args: >
            --label build.git.sha=${CIRCLE_SHA1}
            --label build.git.branch=${CIRCLE_BRANCH}
            --label build.date=$(date -Is)
            --build-arg APP_BUILD_DATE=$(date -Is)
            --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH}
            --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1}
      - hmpps/deploy_env:
          <<: *only_main
          name: deploy_staging
          env: "staging"
          context:
            - hmpps-common-vars
            - basm-api-staging
          requires:
            - build_quay
      - deploy_uat:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          requires:
            - build_image
      - deploy_preprod:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          requires:
            - build_image
      - hold_production:
          <<: *only_deploy_tags
          type: approval
          requires:
            - build_image
      - notify_of_approval:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          requires:
            - build_image
      - deploy_production:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          requires:
            - hold_production
  ecr-cleanup:
    jobs: [ecr-cleanup]
    triggers:
      - schedule:
          cron: "0 9 * * 1"
          <<: *only_main
