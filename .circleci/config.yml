# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1

references:
  app_containers: &app_containers
    docker:
      - image: circleci/ruby:2.6.2
        environment:
          BUNDLER_VERSION: 2.0.1
          RAILS_ENV: test
          RACK_ENV: test
          DATABASE_URL: "postgres://postgres@localhost/hmpps-book-secure-move-api"
          EXTERNAL_URL: mocked_in_tests
      - image: circleci/postgres:10.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: hmpps-book-secure-move-api
  cloud_container: &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move

commands:
  build_for_k8s:
    description: "Builds a Docker image for staging/production and pushes to ECR"
    parameters:
      env:
        type: string
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .

      - run:
          name: push docker image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"

  deploy_to_k8s:
    description: "Deploys a previously built Docker image to staging/production k8s environment"
    parameters:
      env:
        type: string
    steps:
      - checkout

      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context << parameters.env >>

      - deploy:
          name: rolling update image to << parameters.env >>
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-deployment-<< parameters.env >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-deployment-<< parameters.env >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

jobs:
  test:
    <<: *app_containers
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            sudo gem update --system
            sudo gem uninstall bundler
            sudo rm /usr/local/bin/bundle
            sudo rm /usr/local/bin/bundler
            sudo gem install bundler
            bundle install


      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      #- run: bundle exec rake db:schema:load

      - run:
          name: run tests
          command: COVERAGE=1 bundle exec rake

  build_staging:
    <<: *cloud_container
    steps:
      - build_for_k8s:
         env: "staging"

  deploy_staging:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
         env: "staging"

  build_preprod:
    <<: *cloud_container
    steps:
      - build_for_k8s:
         env: "preprod"

  deploy_preprod:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
         env: "preprod"

  build_production:
    <<: *cloud_container
    steps:
      - build_for_k8s:
         env: "production"

  deploy_production:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
         env: "production"

workflows:
  version: 2

  test-build-deploy:
    jobs:
      - test
      - build_staging:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_staging:
          requires:
            - build_staging
      - build_preprod:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_preprod:
          requires:
            - build_preprod
      - hold_production:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: master
      - build_production:
          requires:
            - hold_production
      - deploy_production:
          requires:
            - build_production
