# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  aws-ecr: circleci/aws-ecr@6.9.0

aliases:

  # Slack notifications
  - &notify_slack_on_failure
    slack/notify-on-failure:
      only_for_branches: master

  - &notify_slack_on_release_start
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      title: "API is being prepared for release :building_construction:"
      title_link: "https://github.com/ministryofjustice/hmpps-book-secure-move-api/blob/master/CHANGELOG.md"
      message: A new release was created by ${CIRCLE_USERNAME}
      footer: Click the title to view the changes
      include_project_field: false
      include_job_number_field: false
      include_visit_job_action: false
      color: "#1d70b8"
      mentions: here

  - &notify_slack_of_approval
    slack/approval:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      message: "API release *requires your approval* before it can be deployed :eyes:"
      include_project_field: false
      include_job_number_field: false
      color: "#912b88"
      mentions: $BUILD_NOTIFICATIONS_MENTION_ID

  - &notify_slack_on_release_end
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      title: "API has been deployed :rocket:"
      title_link: https://github.com/ministryofjustice/hmpps-book-secure-move-api/releases
      message: This release was successfully deployed to production
      footer: Click the title to view the release notes
      include_project_field: false
      include_job_number_field: false
      include_visit_job_action: false
      color: "#28a197"
      mentions: here

  # Filter tags
  - &all_tags
    filters:
      tags:
        only: /.*/
  - &only_master
    filters:
      branches:
##        only: master
        only: circleci_review
  - &only_master_and_create_dev
    filters:
      branches:
        only:
          - master
          - dev-auth-from-docs
  - &only_deploy_tags
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

references:
  cloud_container: &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move

  _save-cache: &save-cache
    save_cache:
      key: v2-dependencies-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  _restore-cache: &restore-cache
    restore_cache:
      keys:
        - v2-dependencies-{{ checksum "Gemfile.lock" }}
        - v2-dependencies-
  _install-dependencies: &install-dependencies
    run:
      name: Install dependencies
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle config --local path vendor/bundle
        bundle check || bundle install --jobs=4 --retry=3

  _wait-for-db: &wait-for-db
    run:
      name: Wait for DB
      command: dockerize -wait tcp://localhost:5432 -timeout 1m
  _create-db: &create-db
    run:
      name: Database setup
      command: bundle exec rake db:create
  _api_docs: &api_docs
    run:
      name: Generate API Docs
      command: |
        TESTS=$(circleci tests glob "spec/swagger/*_helper.rb" "spec/requests/**/*_spec.rb" | circleci tests split )
        bundle exec rspec ${TESTS} --format Rswag::Specs::SwaggerFormatter --order defined

  _rspec: &rspec
    run:
      name: Run rspec tests
      command: |
        TESTS=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split )
        echo ${TESTS}
        bundle exec rspec ${TESTS}
        #COVERAGE=1 bundle exec rspec

  _rubocop: &rubocop
    run:
      name: Run rubocop
      command: bundle exec rubocop
  _attach-tmp-workspace: &attach-tmp-workspace
    attach_workspace:
      at: /tmp/workspace

executors:
  basic-executor:
    docker:
      - image: cimg/base:2020.06
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move
          REPO_NAME: hmpps-book-secure-move-api

  test-executor:
    docker:
      - image: circleci/ruby:2.6.6
        environment:
          BUNDLER_VERSION: 2.1.4
          RAILS_ENV: test
          RACK_ENV: test
          DATABASE_URL: "postgres://postgres@localhost/hmpps-book-secure-move-api"
          EXTERNAL_URL: mocked_in_tests
          ENCRYPTOR_SALT: "*\xDB\x9E\a\x1ES1\xB7\xE3\xB8{\xF9Fl\x8Fnn?\x83\xC6\xBBR\x9Eq\x0F\x01./U\x0E\xF1\xDE"
      - image: circleci/postgres:10-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: hmpps-book-secure-move-api
          LANG: C.utf8

  cloud-platform-executor:
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move
          REPO_NAME: hmpps-book-secure-move-api

  image-executor:
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move
          REPO_NAME: hmpps-book-secure-move-api
# TODO var substitution not available here?
#     - image: ${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${GITHUB_TEAM_NAME_SLUG}:ci-latest
      - image: ${ECR_ENDPOINT}/book-a-secure-move/hmpps-book-secure-move-api:ci-latest
        environment:
          DATABASE_URL: "postgres://postgres@localhost/hmpps-book-secure-move-api"
          ENCRYPTOR_SALT: "*\xDB\x9E\a\x1ES1\xB7\xE3\xB8{\xF9Fl\x8Fnn?\x83\xC6\xBBR\x9Eq\x0F\x01./U\x0E\xF1\xDE"
          SECRET_KEY_BASE: doesnotneedtobevalid
          AWS_ACCESS_KEY_ID: doesnotneedtobevalid
          AWS_SECRET_ACCESS_KEY: doesnotneedtobevalid
          S3_BUCKET_NAME: book-a-secure-move-s3-bucket
          S3_BACKEND: http://localhost:4572
          DEV_DISABLE_AUTH: true
      - image: localstack/localstack:latest
        environment:
          DEBUG: 0
          LOCALSTACK_SERVICES: s3
          DATA_DIR: tmp/localstack/data
      - image: circleci/postgres:10-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: hmpps-book-secure-move-api
          LANG: C.utf8


commands:
  build-base:
    description: "Checkout app code and fetch dependencies for running tests"
    steps:
      - *restore-cache
      - *install-dependencies
      - *save-cache

  seed-database:
    description: "Create and seed the Database"
    steps:
      - *create-db

  smoke-test-cmd:
    description: "Check if image runs"
    steps:
       - run:
           name: Check if image runs
           command: |
             ps auxf
             sleep 15
             curl --version
             curl -s --retry 30 --retry-connrefused localhost:3000/ping.json
#      - run:
#          name: Login to ECR
#          command: |
#            LOGIN_COMMAND="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
#            ${LOGIN_COMMAND}
#      - run:
#          name: Pull application image
#         command: |
#           docker pull "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

  prepare_tests:
    description: "Checkout app code and fetch dependencies for running tests"
    steps:
      - checkout
      - run:
          name: Force Bundler
          command: |
            sudo gem update --system
            gem install bundler:2.1.4

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      # Database setup
      - run: bundle exec rake db:create

  build_docker_image:
    description: "Builds a Docker image"
    steps:
      - run:
          name: Build docker image
          command: |
            BUILD_DATE=$(date -Is)

            DOCKER_BUILDKIT=1 docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t ci .
      - run:
          name: Login to ECR
          command: |
            LOGIN_COMMAND="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${LOGIN_COMMAND}
      - run:
          name: Tag push with Git SHA
          command: |
            docker tag ci "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
      - run:
          name: Tag for CI
          command: |
            docker tag ci "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:ci-latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:ci-latest"
      - run:
          name: check image
          command: docker images

  retag_docker_image:
    description: "Retag an image for deployment staging/production and pushes to ECR"
    parameters:
      env:
        type: string
    steps:
    - run:
        name: Login to ECR
        command: |
          LOGIN_COMMAND="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
          ${LOGIN_COMMAND}
    - run:
        name: Retag image
        command: |
          MANIFEST=$(aws ecr batch-get-image --repository-name "${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}" \
          --image-ids imageTag=${CIRCLE_SHA1} --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name "${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}" --image-tag << parameters.env >>.latest \
          --image-manifest "${MANIFEST}"


  build_for_k8s:
    description: "Builds a Docker image for staging/production and pushes to ECR"
    parameters:
      env:
        type: string
      notify_slack:
        type: string
        default: ""
    steps:
      - checkout
      - when:
          condition: <<parameters.notify_slack>>
          steps:
            - *notify_slack_on_release_start
      - attach_workspace:
          at: .

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: false && build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .

      - run:
          name: push app image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            false && docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"
            false && docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"



  deploy_to_k8s:
    description: "Deploys a previously built Docker image to dev/staging/preprod/production k8s environment"
    parameters:
      env:
        type: string
      notify_slack:
        type: string
        default: ""
    steps:
      - checkout
      # This step leverages cloud platform. There needs to be 4 env variables in Circle CI named KUBE_ENV_<env>_* to
      # support this. Details at:
      # https://user-guide.cloud-platform.service.justice.gov.uk/documentation/deploying-an-app/use-circleci-to-upgrade-app.html#creating-a-service-account-for-circleci
      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context << parameters.env >>

      - deploy:
          name: rolling update image to << parameters.env >>
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            true || kubectl set image -n hmpps-book-secure-move-api-<< parameters.env >> \
                   deployment/hmpps-book-secure-move-api-deployment-<< parameters.env >> \
                   webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            true || kubectl annotate -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-deployment-<< parameters.env >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

            true || kubectl set image -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-<< parameters.env >>-sidekiq \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            true ||  kubectl annotate -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-<< parameters.env >>-sidekiq \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"
      - when:
          condition: <<parameters.notify_slack>>
          steps:
            - *notify_slack_on_release_end

jobs:

  setup_test_environment:
    executor: test-executor
    steps:
      - checkout
      - setup_remote_docker
      - build-base
      - seed-database

  api_docs:
    executor: test-executor
    parallelism: 8
    steps:
      - checkout
      - build-base
      - *api_docs
      - persist_to_workspace:
          root: .
          paths:
            - swagger/v1/swagger.yaml
      - *notify_slack_on_failure

  rspec_tests:
    executor: test-executor
    parallelism: 8
    steps:
      - checkout
      - build-base
      - *wait-for-db
      - *create-db
      - *attach-tmp-workspace
      - *rspec

  rubocop_tests:
    executor: test-executor
    steps:
      - checkout
      - build-base
      - *attach-tmp-workspace
      - *rubocop

  build_image:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - build_docker_image

  smoke_tests:
    executor: image-executor
    steps:
      - checkout
      - *attach-tmp-workspace
      - setup_remote_docker
      - smoke-test-cmd

  deploy_dev:
    executor: cloud-platform-executor
    steps:
      - setup_remote_docker
      - retag_docker_image:
          env: "fake"
      - deploy_to_k8s:
          env: "dev"

  dev_tests:
    executor: basic-executor
    steps:
      - checkout

  deploy_staging:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
          env: "staging"

  deploy_preprod:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
          env: "preprod"

  deploy_production:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
          env: "production"
          notify_slack: "true"

workflows:
  version: 2

  test-build:
    jobs:
      - setup_test_environment:
          <<: *all_tags
      - api_docs:
          <<: *all_tags
          requires:
            - setup_test_environment
      - rspec_tests:
          <<: *all_tags
          requires:
              - setup_test_environment
      - rubocop_tests:
          <<: *all_tags
          requires:
            - setup_test_environment
      - build_image:
          <<: *only_master
          requires:
            - api_docs
            - rspec_tests
            - rubocop_tests
      - smoke_tests:
          <<: *only_master
          requires:
            - build_image
      - deploy_dev:
          requires:
            - smoke_tests
      - dev_tests:
          requires:
            - deploy_dev


