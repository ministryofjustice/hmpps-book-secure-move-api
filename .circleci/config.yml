# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1

orbs:
  slack: circleci/slack@3.4.2

aliases:
  - &notify_slack
    slack/notify-on-failure:
      only_for_branches: master
  - &all_tags
    filters:
      tags:
        only: /.*/
  - &only_master_and_tags
    filters:
      tags:
        only: /.*/
      branches:
        only: master
  - &only_master_and_create_dev
    filters:
      tags:
        only: /.*/
      branches:
        only:
        - master
        - dev-auth-from-docs
  - &only_deploy_tags
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

references:
  app_containers: &app_containers
    docker:
      - image: circleci/ruby:2.6.2-node-browsers
        environment:
          BUNDLER_VERSION: 2.1.4
          RAILS_ENV: test
          RACK_ENV: test
          DATABASE_URL: "postgres://postgres@localhost/hmpps-book-secure-move-api"
          EXTERNAL_URL: mocked_in_tests
          ENCRYPTOR_SALT: "*\xDB\x9E\a\x1ES1\xB7\xE3\xB8{\xF9Fl\x8Fnn?\x83\xC6\xBBR\x9Eq\x0F\x01./U\x0E\xF1\xDE"
      - image: circleci/postgres:10.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: hmpps-book-secure-move-api
  cloud_container: &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move

commands:
  prepare_tests:
    description: "Checkout app code and fetch dependencies for running tests"
    steps:
      - checkout

      - run:
          name: Force Bundler
          command: |
            sudo gem update --system
            gem install bundler:2.1.4

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
            yarn install
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      # Database setup
      - run: bundle exec rake db:create

  build_for_k8s:
    description: "Builds a Docker image for staging/production and pushes to ECR"
    parameters:
      env:
        type: string
    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .

      - run:
          name: push app image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"

  deploy_to_k8s:
    description: "Deploys a previously built Docker image to dev/staging/preprod/production k8s environment"
    parameters:
      env:
        type: string
    steps:
      - checkout

      # This step leverages cloud platform. There needs to be 4 env variables in Circle CI named KUBE_ENV_<env>_* to
      # support this. Details at:
      # https://user-guide.cloud-platform.service.justice.gov.uk/documentation/deploying-an-app/use-circleci-to-upgrade-app.html#creating-a-service-account-for-circleci
      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context << parameters.env >>

      - deploy:
          name: rolling update image to << parameters.env >>
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-deployment-<< parameters.env >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-deployment-<< parameters.env >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

            kubectl set image -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-<< parameters.env >>-sidekiq \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n hmpps-book-secure-move-api-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-api-<< parameters.env >>-sidekiq \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

jobs:
  test:
    <<: *app_containers
    steps:
      - prepare_tests

      - run:
          name: rubocop
          command: bundle exec rubocop

      - run:
          name: run tests
          command: COVERAGE=1 bundle exec rspec

      - *notify_slack

  api_docs:
    <<: *app_containers
    steps:
      - prepare_tests

      - run:
          name: generate swagger documentation
          command: bundle exec rspec spec/swagger spec/requests --format Rswag::Specs::SwaggerFormatter --order defined

      - persist_to_workspace:
          root: .
          paths:
            - swagger/v1/swagger.yaml
            - node_modules/*

  build_dev:
    <<: *cloud_container
    steps:
      - build_for_k8s:
         env: "dev"

  deploy_dev:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
         env: "dev"

  build_staging:
    <<: *cloud_container
    steps:
      - build_for_k8s:
         env: "staging"

  deploy_staging:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
         env: "staging"

  build_preprod:
    <<: *cloud_container
    steps:
      - build_for_k8s:
         env: "preprod"

  deploy_preprod:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
         env: "preprod"

  build_production:
    <<: *cloud_container
    steps:
      - build_for_k8s:
         env: "production"

  deploy_production:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
         env: "production"

workflows:
  version: 2

  test-build-deploy:
    jobs:
      - test:
          <<: *all_tags
      - api_docs:
          <<: *only_master_and_create_dev
      - build_dev:
          <<: *only_master_and_create_dev
          requires:
            - api_docs
      - deploy_dev:
          <<: *only_master_and_create_dev
          requires:
            - test
            - build_dev
      - build_staging:
          <<: *only_master_and_tags
          requires:
            - api_docs
      - deploy_staging:
          <<: *only_master_and_tags
          requires:
            - test
            - build_staging
      - build_preprod:
          <<: *only_master_and_tags
          requires:
            - api_docs
      - deploy_preprod:
          <<: *only_master_and_tags
          requires:
            - test
            - build_preprod
      - build_production:
          <<: *only_deploy_tags
          requires:
            - api_docs
      - hold_production:
          <<: *only_deploy_tags
          type: approval
          requires:
            - test
            - build_production
      - deploy_production:
          <<: *only_deploy_tags
          requires:
            - hold_production
